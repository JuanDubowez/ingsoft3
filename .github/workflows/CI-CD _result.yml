name: CI-CD_result

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ tpIntegrador , main]
    paths:
      - 'tpIntegrador/example-voting-app-master/result/**'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # job to build the microservice
  build-microservices:
    name: Build result app
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    continue-on-error: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install nodejs dependences
      - name: Install nodejs app dependences
        run: |
          cd tpIntegrador/example-voting-app-master/result/
          npm ci \
          && npm cache clean --force 
          
      # Run node unit tests
      - name: Test
        run: |
          cd tpIntegrador/example-voting-app-master/result/
          npm install jest
          npm install -D jest-environment-jsdom
          npm install jest-junit 
          npm run test
        
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Test result service       # Name of the check run which will be created
          path: 'tpIntegrador/example-voting-app-master/result/junit.xml'    # Path to test results
          reporter: jest-junit  

      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build result image and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./tpIntegrador/example-voting-app-master/result/
          # Note: tags has to be all lower-case
          tags: juandubowez/result:latest 
          # build on feature branches, push only on master branch
          push: ${{ github.ref == 'refs/heads/tpIntegrador' }}

      - name: Use Node 16
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install packages
        run: yarn install --frozen-lockfile

      - name: Install Railway
        run: npm i -g @railway/cli

      - name: Deploy result app
        working-directory: ./tpIntegrador/example-voting-app-master/result/
        run: railway up -s result
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Use Node 16
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install firefox driver
        uses: browser-actions/setup-geckodriver@latest
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          run: geckodriver --version

      - name: Install dependences
        run: |
          cd tpIntegrador/integration_tests/
          npm i --dev

      - name: test
        working-directory: ./tpIntegrador/integration_tests/
        run: |
          npm test
        continue-on-error: false

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Integration tests Results           # Name of the check run which will be created
          path: 'tpIntegrador/integration_tests/test-results.xml'   # Path to test results
          reporter: jest-junit  
        

